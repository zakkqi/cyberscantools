// frontend/src/components/scanners/WebVulnerabilityScanner.jsx
import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip, BarChart, Bar, XAxis, YAxis, CartesianGrid } from 'recharts';
import { FaArrowLeft } from 'react-icons/fa';
import '../../styles/ScannerStyles.css';

const WebVulnerabilityScanner = ({ onBack }) => {
    const [target, setTarget] = useState('');
    const [scanMode, setScanMode] = useState('basic');
    const [loading, setLoading] = useState(false);
    const [results, setResults] = useState(null);
    const [error, setError] = useState(null);
    const [scanProgress, setScanProgress] = useState(null);
    const [scanId, setScanId] = useState(null);
    const [viewMode, setViewMode] = useState('list'); // 'list' or 'chart'
    const [showInitialContent, setShowInitialContent] = useState(true);
    const [activeTab, setActiveTab] = useState('all'); // 'all', 'high', 'medium', 'low', 'info'

    // Poll for progress updates
    useEffect(() => {
        if (scanId && loading) {
            const interval = setInterval(async () => {
                try {
                    const response = await fetch(`http://localhost:5000/api/scan/web/progress/${scanId}`);
                    const data = await response.json();
                    
                    setScanProgress(data);
                    
                    if (data.status === 'completed') {
                        setLoading(false);
                        const severityCounts = {
                            'High': 0,
                            'Medium': 0,
                            'Low': 0,
                            'Informational': 0
                        };
                        data.alerts.forEach(alert => {
                            const risk = alert.risk || 'Informational';
                            if (risk in severityCounts) {
                                severityCounts[risk]++;
                            }
                        });
                        
                        setResults({
                            target: data.target,
                            total: data.total_alerts,
                            vulnerabilities: data.alerts,
                            scan_mode: scanMode,
                            ...severityCounts
                        });
                        clearInterval(interval);
                    } else if (data.status === 'error') {
                        setError(data.error || 'Scan failed');
                        setLoading(false);
                        clearInterval(interval);
                    }
                } catch (err) {
                    console.error('Error fetching progress:', err);
                }
            }, 1000);

            return () => clearInterval(interval);
        }
    }, [scanId, loading, scanMode]);

    const handleScan = async () => {
        if (!target.trim()) {
            setError('Please enter a target URL');
            return;
        }

        setLoading(true);
        setError(null);
        setResults(null);
        setScanProgress(null);
        setShowInitialContent(false);
        setActiveTab('all');

        try {
            const response = await fetch('http://localhost:5000/api/scan/web/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    target: target,
                    mode: scanMode
                })
            });

            const data = await response.json();

            if (response.ok && data.status === 'started') {
                setScanId(data.scan_id);
            } else {
                setError(data.message || 'Failed to start scan');
                setLoading(false);
                setShowInitialContent(true);
            }
        } catch (err) {
            setError('Failed to connect to scanner service');
            setLoading(false);
            setShowInitialContent(true);
        }
    };

    const handleNewScan = () => {
        setResults(null);
        setError(null);
        setScanProgress(null);
        setShowInitialContent(true);
        setTarget('');
        setActiveTab('all');
    };

    const getPhaseText = (phase) => {
        const phaseTexts = {
            'starting': 'Initializing scan...',
            'accessing_target': 'Accessing target website...',
            'spider_starting': 'Starting spider...',
            'spider_running': 'Crawling website...',
            'spider_complete': 'Spider complete',
            'passive_scan_starting': 'Starting passive scan...',
            'passive_scan_running': 'Analyzing responses...',
            'active_scan_starting': 'Starting active scan...',
            'active_scan_running': 'Performing security tests...',
            'completed': 'Scan completed'
        };
        return phaseTexts[phase] || phase;
    };

    const getRiskColor = (risk) => {
        const colors = {
            'High': '#dc3545',
            'Medium': '#fd7e14',
            'Low': '#ffc107',
            'Informational': '#17a2b8'
        };
        return colors[risk] || '#6c757d';
    };

    const getProgressBarColor = (progress) => {
        if (progress < 30) return '#dc3545';
        if (progress < 70) return '#fd7e14';
        return '#28a745';
    };

    const getFilteredVulnerabilities = () => {
        if (!results || !results.vulnerabilities) return [];
        
        if (activeTab === 'all') {
            return results.vulnerabilities;
        }
        
        const riskMap = {
            'high': 'High',
            'medium': 'Medium',
            'low': 'Low',
            'info': 'Informational'
        };
        
        const targetRisk = riskMap[activeTab];
        return results.vulnerabilities.filter(vuln => vuln.risk === targetRisk);
    };

    // Prepare data for charts
    const prepareChartData = () => {
        if (!results) return { pie: [], bar: [] };

        const pieData = [
            { name: 'High', value: results.High || 0, color: '#dc3545' },
            { name: 'Medium', value: results.Medium || 0, color: '#fd7e14' },
            { name: 'Low', value: results.Low || 0, color: '#ffc107' },
            { name: 'Info', value: results.Informational || 0, color: '#17a2b8' }
        ].filter(item => item.value > 0);

        // Group vulnerabilities by type for bar chart
        const vulnTypes = {};
        results.vulnerabilities.forEach(vuln => {
            const type = vuln.name || 'Unknown';
            vulnTypes[type] = (vulnTypes[type] || 0) + 1;
        });

        const barData = Object.entries(vulnTypes)
            .map(([name, count]) => ({ name, count }))
            .sort((a, b) => b.count - a.count)
            .slice(0, 10);

        return { pieData, barData };
    };

    const { pieData, barData } = prepareChartData();

    return (
        <div className="scanner-container">
            <div className="scanner-header">
                <button 
                    className="back-button"
                    onClick={onBack}
                >
                    <FaArrowLeft /> Back to Scanner Selection
                </button>
                <h2>Web Vulnerability Scanner (OWASP ZAP)</h2>
            </div>
            
            <div className="scan-form-card">
                <div className="scan-form">
                    <input
                        type="text"
                        placeholder="Enter target URL (e.g., http://example.com)"
                        value={target}
                        onChange={(e) => setTarget(e.target.value)}
                        className="scan-input"
                        disabled={loading}
                    />
                    
                    <div className="scan-mode-selector">
                        <select 
                            value={scanMode} 
                            onChange={(e) => setScanMode(e.target.value)}
                            className="scan-select"
                            disabled={loading}
                        >
                            <option value="basic">Basic Scan</option>
                            <option value="passive">Passive Scan Only</option>
                            <option value="active">Full Active Scan</option>
                        </select>
                        
                        <div className="scan-mode-info">
                            {scanMode === 'basic' && (
                                <div className="mode-description">
                                    <span className="info-icon">ℹ️</span>
                                    <div>
                                        <strong>Spider + Passive scan</strong>
                                        <p>Quick security check that crawls the website and identifies vulnerabilities without attacking</p>
                                    </div>
                                </div>
                            )}
                            {scanMode === 'passive' && (
                                <div className="mode-description">
                                    <span className="info-icon">ℹ️</span>
                                    <div>
                                        <strong>Only analyze existing responses</strong>
                                        <p>Non-intrusive scan that only examines server responses without active testing</p>
                                    </div>
                                </div>
                            )}
                            {scanMode === 'active' && (
                                <div className="mode-description">
                                    <span className="info-icon">⚠️</span>
                                    <div>
                                        <strong>Full scan with attack simulation</strong>
                                        <p>Most thorough scan that actively tests for vulnerabilities (use only on authorized targets)</p>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                    
                    <button 
                        onClick={loading ? null : (results ? handleNewScan : handleScan)}
                        disabled={loading}
                        className="scan-button"
                    >
                        {loading ? (
                            <>
                                <span className="spinner"></span>
                                Scanning...
                            </>
                        ) : results ? (
                            'New Scan'
                        ) : (
                            'Start Scan'
                        )}
                    </button>
                </div>
            </div>

            {showInitialContent && (
                <>
                    <div className="about-tool">
                        <h3>About OWASP ZAP Scanner</h3>
                        <p>
                            Our Web Vulnerability Scanner leverages <strong>OWASP ZAP (Zed Attack Proxy)</strong>, one of the world's most popular 
                            free security tools. This scanner helps identify security vulnerabilities in web applications automatically, 
                            making it easier for developers and security professionals to find and fix security issues before they can be exploited.
                        </p>
                        <p>
                            The scanner performs comprehensive security testing including detection of SQL Injection, Cross-Site Scripting (XSS), 
                            Security Misconfiguration, and many other common vulnerabilities listed in the OWASP Top 10.
                        </p>
                    </div>

                    <div className="scan-modes-comparison">
                        <h3>Scan Modes Comparison</h3>
                        <table className="comparison-table">
                            <thead>
                                <tr>
                                    <th>Security Check</th>
                                    <th>Basic Scan</th>
                                    <th>Passive Scan</th>
                                    <th>Full Active Scan</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Spider/Crawl Website</td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Analyze HTTP Headers</td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Check Security Headers</td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Cookie Security Analysis</td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>SQL Injection Testing</td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Cross-Site Scripting Testing</td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Authentication Testing</td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                                <tr>
                                    <td>Command Injection Testing</td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="cross">✗</span></td>
                                    <td><span className="check">✓</span></td>
                                </tr>
                            </tbody>
                        </table>
                        
                        <div className="scan-notes">
                            <h4>Important Notes:</h4>
                            <ul>
                                <li><strong>Basic Scan:</strong> Combines spider crawling with passive analysis. Safe for production environments.</li>
                                <li><strong>Passive Scan:</strong> Only analyzes server responses without sending any attack payloads. Completely safe.</li>
                                <li><strong>Full Active Scan:</strong> Performs actual attack simulations. Use only on systems you own or have explicit permission to test.</li>
                            </ul>
                        </div>
                    </div>
                </>
            )}

            {error && (
                <div className="error-message">
                    <span className="error-icon">⚠️</span> {error}
                </div>
            )}

            {loading && scanProgress && (
                <div className="progress-container">
                    <div className="progress-header">
                        <span className="progress-phase">
                            {getPhaseText(scanProgress.phase)}
                        </span>
                        <span className="progress-percentage">
                            {Math.round(scanProgress.progress)}%
                        </span>
                    </div>
                    
                    <div className="progress-bar-container">
                        <div 
                            className="progress-bar"
                            style={{
                                width: `${scanProgress.progress}%`,
                                backgroundColor: getProgressBarColor(scanProgress.progress)
                            }}
                        />
                    </div>
                    
                    {scanProgress.spider_progress !== undefined && (
                        <div className="sub-progress">
                            <span>Spider Progress: {scanProgress.spider_progress}%</span>
                        </div>
                    )}
                    
                    {scanProgress.passive_remaining !== undefined && (
                        <div className="sub-progress">
                            <span>Passive Scan Records Remaining: {scanProgress.passive_remaining}</span>
                        </div>
                    )}
                    
                    {scanProgress.active_progress !== undefined && (
                        <div className="sub-progress">
                            <span>Active Scan Progress: {scanProgress.active_progress}%</span>
                        </div>
                    )}
                </div>
            )}

            {results && (
                <div className="scan-results">
                    <div className="results-header">
                        <h3>Scan Results</h3>
                        <div className="view-toggle">
                            <button 
                                className={`toggle-btn ${viewMode === 'list' ? 'active' : ''}`}
                                onClick={() => setViewMode('list')}
                            >
                                📋 List View
                            </button>
                            <button 
                                className={`toggle-btn ${viewMode === 'chart' ? 'active' : ''}`}
                                onClick={() => setViewMode('chart')}
                            >
                                📊 Chart View
                            </button>
                        </div>
                    </div>

                    <div className="results-summary">
                        <div className="summary-card">
                            <div className="summary-item">
                                <span className="summary-label">Target:</span>
                                <span className="summary-value">{results.target}</span>
                            </div>
                            <div className="summary-item">
                                <span className="summary-label">Total Vulnerabilities:</span>
                                <span className="summary-value">{results.total}</span>
                            </div>
                            <div className="summary-item">
                                <span className="summary-label">Scan Mode:</span>
                                <span className="summary-value">{results.scan_mode}</span>
                            </div>
                        </div>
                        
                        <div className="severity-summary">
                            <div 
                                className={`severity-item clickable ${activeTab === 'high' ? 'active' : ''}`} 
                                style={{backgroundColor: getRiskColor('High')}}
                                onClick={() => viewMode === 'list' && setActiveTab('high')}
                            >
                                <span className="severity-count">{results.High || 0}</span>
                                <span className="severity-label">High</span>
                            </div>
                            <div 
                                className={`severity-item clickable ${activeTab === 'medium' ? 'active' : ''}`} 
                                style={{backgroundColor: getRiskColor('Medium')}}
                                onClick={() => viewMode === 'list' && setActiveTab('medium')}
                            >
                                <span className="severity-count">{results.Medium || 0}</span>
                                <span className="severity-label">Medium</span>
                            </div>
                            <div 
                                className={`severity-item clickable ${activeTab === 'low' ? 'active' : ''}`} 
                                style={{backgroundColor: getRiskColor('Low')}}
                                onClick={() => viewMode === 'list' && setActiveTab('low')}
                            >
                                <span className="severity-count">{results.Low || 0}</span>
                                <span className="severity-label">Low</span>
                            </div>
                            <div 
                                className={`severity-item clickable ${activeTab === 'info' ? 'active' : ''}`} 
                                style={{backgroundColor: getRiskColor('Informational')}}
                                onClick={() => viewMode === 'list' && setActiveTab('info')}
                            >
                                <span className="severity-count">{results.Informational || 0}</span>
                                <span className="severity-label">Info</span>
                            </div>
                        </div>
                    </div>

                    {viewMode === 'chart' ? (
                        <div className="charts-container">
                            <div className="chart-box">
                                <h4>Vulnerabilities by Severity</h4>
                                <ResponsiveContainer width="100%" height={300}>
                                    <PieChart>
                                        <Pie
                                            data={pieData}
                                            cx="50%"
                                            cy="50%"
                                            labelLine={false}
                                            label={entry => `${entry.name}: ${entry.value}`}
                                            outerRadius={80}
                                            fill="#8884d8"
                                            dataKey="value"
                                        >
                                            {pieData.map((entry, index) => (
                                                <Cell key={`cell-${index}`} fill={entry.color} />
                                            ))}
                                        </Pie>
                                        <Tooltip />
                                    </PieChart>
                                </ResponsiveContainer>
                            </div>

                            <div className="chart-box">
                                <h4>Top Vulnerability Types</h4>
                                <ResponsiveContainer width="100%" height={300}>
                                    <BarChart data={barData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
                                        <CartesianGrid strokeDasharray="3 3" />
                                        <XAxis dataKey="name" angle={-45} textAnchor="end" height={100} />
                                        <YAxis />
                                        <Tooltip />
                                        <Bar dataKey="count" fill="#8884d8" />
                                    </BarChart>
                                </ResponsiveContainer>
                            </div>
                        </div>
                    ) : (
                        <>
                            <div className="severity-tabs">
                                <button 
                                    className={`tab-button ${activeTab === 'all' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('all')}
                                >
                                    All ({results.total})
                                </button>
                                <button 
                                    className={`tab-button high ${activeTab === 'high' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('high')}
                                >
                                    High ({results.High || 0})
                                </button>
                                <button 
                                    className={`tab-button medium ${activeTab === 'medium' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('medium')}
                                >
                                    Medium ({results.Medium || 0})
                                </button>
                                <button 
                                    className={`tab-button low ${activeTab === 'low' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('low')}
                                >
                                    Low ({results.Low || 0})
                                </button>
                                <button 
                                    className={`tab-button info ${activeTab === 'info' ? 'active' : ''}`}
                                    onClick={() => setActiveTab('info')}
                                >
                                    Informational ({results.Informational || 0})
                                </button>
                            </div>

                            <div className="vulnerabilities-list">
                                {getFilteredVulnerabilities().length > 0 ? (
                                    getFilteredVulnerabilities().map((vuln, index) => (
                                        <div key={index} className={`vulnerability-item ${vuln.risk.toLowerCase()}`}>
                                            <div className="vuln-header">
                                                <h5>{vuln.name}</h5>
                                                <span 
                                                    className="risk-badge"
                                                    style={{backgroundColor: getRiskColor(vuln.risk)}}
                                                >
                                                    {vuln.risk}
                                                </span>
                                            </div>
                                            
                                            <div className="vuln-details">
                                                <p><strong>URL:</strong> <a href={vuln.url} target="_blank" rel="noopener noreferrer">{vuln.url}</a></p>
                                                <p><strong>Description:</strong> {vuln.description}</p>
                                                {vuln.solution && (
                                                    <div className="solution-box">
                                                        <p><strong>Solution:</strong></p>
                                                        <p>{vuln.solution}</p>
                                                    </div>
                                                )}
                                                <div className="vuln-meta">
                                                    {vuln.cwe_id && (
                                                        <span className="meta-tag">CWE-{vuln.cwe_id}</span>
                                                    )}
                                                    {vuln.confidence && (
                                                        <span className="meta-tag">Confidence: {vuln.confidence}</span>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <div className="empty-state">
                                        <p>No vulnerabilities found in this category</p>
                                    </div>
                                )}
                            </div>
                        </>
                    )}
                </div>
            )}
        </div>
    );
};

export default WebVulnerabilityScanner;